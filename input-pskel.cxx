// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "input-pskel.hxx"

// paramsLJ_pskel
//

void paramsLJ_pskel::
epsilon_parser (::xml_schema::double_pskel& p)
{
  this->epsilon_parser_ = &p;
}

void paramsLJ_pskel::
mass_parser (::xml_schema::double_pskel& p)
{
  this->mass_parser_ = &p;
}

void paramsLJ_pskel::
rho_parser (::xml_schema::double_pskel& p)
{
  this->rho_parser_ = &p;
}

void paramsLJ_pskel::
h_parser (::xml_schema::double_pskel& p)
{
  this->h_parser_ = &p;
}

void paramsLJ_pskel::
parsers (::xml_schema::double_pskel& epsilon,
         ::xml_schema::double_pskel& mass,
         ::xml_schema::double_pskel& rho,
         ::xml_schema::double_pskel& h)
{
  this->epsilon_parser_ = &epsilon;
  this->mass_parser_ = &mass;
  this->rho_parser_ = &rho;
  this->h_parser_ = &h;
}

paramsLJ_pskel::
paramsLJ_pskel ()
: epsilon_parser_ (0),
  mass_parser_ (0),
  rho_parser_ (0),
  h_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// boundaryConditions_pskel
//

void boundaryConditions_pskel::
top_parser (::xml_schema::int_pskel& p)
{
  this->top_parser_ = &p;
}

void boundaryConditions_pskel::
right_parser (::xml_schema::int_pskel& p)
{
  this->right_parser_ = &p;
}

void boundaryConditions_pskel::
bottom_parser (::xml_schema::int_pskel& p)
{
  this->bottom_parser_ = &p;
}

void boundaryConditions_pskel::
left_parser (::xml_schema::int_pskel& p)
{
  this->left_parser_ = &p;
}

void boundaryConditions_pskel::
parsers (::xml_schema::int_pskel& top,
         ::xml_schema::int_pskel& right,
         ::xml_schema::int_pskel& bottom,
         ::xml_schema::int_pskel& left)
{
  this->top_parser_ = &top;
  this->right_parser_ = &right;
  this->bottom_parser_ = &bottom;
  this->left_parser_ = &left;
}

boundaryConditions_pskel::
boundaryConditions_pskel ()
: top_parser_ (0),
  right_parser_ (0),
  bottom_parser_ (0),
  left_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// particlesLJ_pskel
//

void particlesLJ_pskel::
body_parser (::body_pskel& p)
{
  this->body_parser_ = &p;
}

void particlesLJ_pskel::
parsers (::body_pskel& body)
{
  this->body_parser_ = &body;
}

particlesLJ_pskel::
particlesLJ_pskel ()
: body_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// input_pskel
//

void input_pskel::
t_end_parser (::xml_schema::double_pskel& p)
{
  this->t_end_parser_ = &p;
}

void input_pskel::
delta_t_parser (::xml_schema::double_pskel& p)
{
  this->delta_t_parser_ = &p;
}

void input_pskel::
calcType_parser (::calcType_pskel& p)
{
  this->calcType_parser_ = &p;
}

void input_pskel::
baseNameOutputFiles_parser (::xml_schema::string_pskel& p)
{
  this->baseNameOutputFiles_parser_ = &p;
}

void input_pskel::
writeFrequency_parser (::xml_schema::int_pskel& p)
{
  this->writeFrequency_parser_ = &p;
}

void input_pskel::
gravInput_parser (::xml_schema::string_pskel& p)
{
  this->gravInput_parser_ = &p;
}

void input_pskel::
paramsLJ_parser (::paramsLJ_pskel& p)
{
  this->paramsLJ_parser_ = &p;
}

void input_pskel::
boundaryConditions_parser (::boundaryConditions_pskel& p)
{
  this->boundaryConditions_parser_ = &p;
}

void input_pskel::
particlesLJ_parser (::particlesLJ_pskel& p)
{
  this->particlesLJ_parser_ = &p;
}

void input_pskel::
parsers (::xml_schema::double_pskel& t_end,
         ::xml_schema::double_pskel& delta_t,
         ::calcType_pskel& calcType,
         ::xml_schema::string_pskel& baseNameOutputFiles,
         ::xml_schema::int_pskel& writeFrequency,
         ::xml_schema::string_pskel& gravInput,
         ::paramsLJ_pskel& paramsLJ,
         ::boundaryConditions_pskel& boundaryConditions,
         ::particlesLJ_pskel& particlesLJ)
{
  this->t_end_parser_ = &t_end;
  this->delta_t_parser_ = &delta_t;
  this->calcType_parser_ = &calcType;
  this->baseNameOutputFiles_parser_ = &baseNameOutputFiles;
  this->writeFrequency_parser_ = &writeFrequency;
  this->gravInput_parser_ = &gravInput;
  this->paramsLJ_parser_ = &paramsLJ;
  this->boundaryConditions_parser_ = &boundaryConditions;
  this->particlesLJ_parser_ = &particlesLJ;
}

input_pskel::
input_pskel ()
: t_end_parser_ (0),
  delta_t_parser_ (0),
  calcType_parser_ (0),
  baseNameOutputFiles_parser_ (0),
  writeFrequency_parser_ (0),
  gravInput_parser_ (0),
  paramsLJ_parser_ (0),
  boundaryConditions_parser_ (0),
  particlesLJ_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// body_pskel
//

void body_pskel::
bodyType_parser (::xml_schema::string_pskel& p)
{
  this->bodyType_parser_ = &p;
}

void body_pskel::
position_parser (::xml_schema::string_pskel& p)
{
  this->position_parser_ = &p;
}

void body_pskel::
velocity_parser (::xml_schema::string_pskel& p)
{
  this->velocity_parser_ = &p;
}

void body_pskel::
objectSpecificFormat_parser (::xml_schema::string_pskel& p)
{
  this->objectSpecificFormat_parser_ = &p;
}

void body_pskel::
parsers (::xml_schema::string_pskel& bodyType,
         ::xml_schema::string_pskel& position,
         ::xml_schema::string_pskel& velocity,
         ::xml_schema::string_pskel& objectSpecificFormat)
{
  this->bodyType_parser_ = &bodyType;
  this->position_parser_ = &position;
  this->velocity_parser_ = &velocity;
  this->objectSpecificFormat_parser_ = &objectSpecificFormat;
}

body_pskel::
body_pskel ()
: bodyType_parser_ (0),
  position_parser_ (0),
  velocity_parser_ (0),
  objectSpecificFormat_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// calcType_pskel
//

void calcType_pskel::
post_calcType ()
{
}

// paramsLJ_pskel
//

void paramsLJ_pskel::
epsilon (double)
{
}

void paramsLJ_pskel::
mass (double)
{
}

void paramsLJ_pskel::
rho (double)
{
}

void paramsLJ_pskel::
h (double)
{
}

void paramsLJ_pskel::
post_paramsLJ ()
{
}

// boundaryConditions_pskel
//

void boundaryConditions_pskel::
top (int)
{
}

void boundaryConditions_pskel::
right (int)
{
}

void boundaryConditions_pskel::
bottom (int)
{
}

void boundaryConditions_pskel::
left (int)
{
}

void boundaryConditions_pskel::
post_boundaryConditions ()
{
}

// particlesLJ_pskel
//

void particlesLJ_pskel::
body ()
{
}

void particlesLJ_pskel::
post_particlesLJ ()
{
}

// input_pskel
//

void input_pskel::
t_end (double)
{
}

void input_pskel::
delta_t (double)
{
}

void input_pskel::
calcType ()
{
}

void input_pskel::
baseNameOutputFiles (const ::std::string&)
{
}

void input_pskel::
writeFrequency (int)
{
}

void input_pskel::
gravInput (const ::std::string&)
{
}

void input_pskel::
paramsLJ ()
{
}

void input_pskel::
boundaryConditions ()
{
}

void input_pskel::
particlesLJ ()
{
}

void input_pskel::
post_input ()
{
}

// body_pskel
//

void body_pskel::
bodyType (const ::std::string&)
{
}

void body_pskel::
position (const ::std::string&)
{
}

void body_pskel::
velocity (const ::std::string&)
{
}

void body_pskel::
objectSpecificFormat (const ::std::string&)
{
}

void body_pskel::
post_body ()
{
}

#include <cassert>

// Element validation and dispatch functions for paramsLJ_pskel.
//
bool paramsLJ_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "epsilon" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &paramsLJ_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "epsilon",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool paramsLJ_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void paramsLJ_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void paramsLJ_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "epsilon");

  this->v_state_stack_.pop ();
}

void paramsLJ_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "epsilon" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->epsilon_parser_;

          if (this->epsilon_parser_)
            this->epsilon_parser_->pre ();
        }
        else
        {
          if (this->epsilon_parser_)
          {
            double tmp (this->epsilon_parser_->post_double ());
            this->epsilon (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "epsilon",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "mass" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->mass_parser_;

          if (this->mass_parser_)
            this->mass_parser_->pre ();
        }
        else
        {
          if (this->mass_parser_)
          {
            double tmp (this->mass_parser_->post_double ());
            this->mass (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "mass",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "rho" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->rho_parser_;

          if (this->rho_parser_)
            this->rho_parser_->pre ();
        }
        else
        {
          if (this->rho_parser_)
          {
            double tmp (this->rho_parser_->post_double ());
            this->rho (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "rho",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "h" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->h_parser_;

          if (this->h_parser_)
            this->h_parser_->pre ();
        }
        else
        {
          if (this->h_parser_)
          {
            double tmp (this->h_parser_->post_double ());
            this->h (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "h",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for boundaryConditions_pskel.
//
bool boundaryConditions_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "top" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &boundaryConditions_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "top",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool boundaryConditions_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void boundaryConditions_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void boundaryConditions_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "top");

  this->v_state_stack_.pop ();
}

void boundaryConditions_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "top" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->top_parser_;

          if (this->top_parser_)
            this->top_parser_->pre ();
        }
        else
        {
          if (this->top_parser_)
          {
            int tmp (this->top_parser_->post_int ());
            this->top (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "top",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "right" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->right_parser_;

          if (this->right_parser_)
            this->right_parser_->pre ();
        }
        else
        {
          if (this->right_parser_)
          {
            int tmp (this->right_parser_->post_int ());
            this->right (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "right",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "bottom" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->bottom_parser_;

          if (this->bottom_parser_)
            this->bottom_parser_->pre ();
        }
        else
        {
          if (this->bottom_parser_)
          {
            int tmp (this->bottom_parser_->post_int ());
            this->bottom (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "bottom",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "left" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->left_parser_;

          if (this->left_parser_)
            this->left_parser_->pre ();
        }
        else
        {
          if (this->left_parser_)
          {
            int tmp (this->left_parser_->post_int ());
            this->left (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "left",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for particlesLJ_pskel.
//
bool particlesLJ_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "body" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &particlesLJ_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool particlesLJ_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void particlesLJ_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void particlesLJ_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void particlesLJ_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "body" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->body_parser_;

          if (this->body_parser_)
            this->body_parser_->pre ();
        }
        else
        {
          if (this->body_parser_)
          {
            this->body_parser_->post_body ();
            this->body ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for input_pskel.
//
bool input_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "t_end" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &input_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "t_end",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool input_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void input_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void input_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "t_end");

  this->v_state_stack_.pop ();
}

void input_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "t_end" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->t_end_parser_;

          if (this->t_end_parser_)
            this->t_end_parser_->pre ();
        }
        else
        {
          if (this->t_end_parser_)
          {
            double tmp (this->t_end_parser_->post_double ());
            this->t_end (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "t_end",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "delta_t" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->delta_t_parser_;

          if (this->delta_t_parser_)
            this->delta_t_parser_->pre ();
        }
        else
        {
          if (this->delta_t_parser_)
          {
            double tmp (this->delta_t_parser_->post_double ());
            this->delta_t (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "delta_t",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "calcType" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->calcType_parser_;

          if (this->calcType_parser_)
            this->calcType_parser_->pre ();
        }
        else
        {
          if (this->calcType_parser_)
          {
            this->calcType_parser_->post_calcType ();
            this->calcType ();
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "calcType",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "baseNameOutputFiles" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->baseNameOutputFiles_parser_;

          if (this->baseNameOutputFiles_parser_)
            this->baseNameOutputFiles_parser_->pre ();
        }
        else
        {
          if (this->baseNameOutputFiles_parser_)
          {
            const ::std::string& tmp (this->baseNameOutputFiles_parser_->post_string ());
            this->baseNameOutputFiles (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "baseNameOutputFiles",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if (n == "writeFrequency" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->writeFrequency_parser_;

          if (this->writeFrequency_parser_)
            this->writeFrequency_parser_->pre ();
        }
        else
        {
          if (this->writeFrequency_parser_)
          {
            int tmp (this->writeFrequency_parser_->post_int ());
            this->writeFrequency (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "writeFrequency",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if (n == "gravInput" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->gravInput_parser_;

          if (this->gravInput_parser_)
            this->gravInput_parser_->pre ();
        }
        else
        {
          if (this->gravInput_parser_)
          {
            const ::std::string& tmp (this->gravInput_parser_->post_string ());
            this->gravInput (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "gravInput",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if (n == "paramsLJ" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->paramsLJ_parser_;

          if (this->paramsLJ_parser_)
            this->paramsLJ_parser_->pre ();
        }
        else
        {
          if (this->paramsLJ_parser_)
          {
            this->paramsLJ_parser_->post_paramsLJ ();
            this->paramsLJ ();
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "paramsLJ",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if (n == "boundaryConditions" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->boundaryConditions_parser_;

          if (this->boundaryConditions_parser_)
            this->boundaryConditions_parser_->pre ();
        }
        else
        {
          if (this->boundaryConditions_parser_)
          {
            this->boundaryConditions_parser_->post_boundaryConditions ();
            this->boundaryConditions ();
          }

          count = 0;
          state = 8UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "boundaryConditions",
            ns, n);
        count = 0;
        state = 8UL;
        // Fall through.
      }
    }
    case 8UL:
    {
      if (n == "particlesLJ" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->particlesLJ_parser_;

          if (this->particlesLJ_parser_)
            this->particlesLJ_parser_->pre ();
        }
        else
        {
          if (this->particlesLJ_parser_)
          {
            this->particlesLJ_parser_->post_particlesLJ ();
            this->particlesLJ ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "particlesLJ",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for body_pskel.
//
bool body_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "bodyType" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &body_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "bodyType",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool body_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void body_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void body_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "bodyType");

  this->v_state_stack_.pop ();
}

void body_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "bodyType" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->bodyType_parser_;

          if (this->bodyType_parser_)
            this->bodyType_parser_->pre ();
        }
        else
        {
          if (this->bodyType_parser_)
          {
            const ::std::string& tmp (this->bodyType_parser_->post_string ());
            this->bodyType (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "bodyType",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "position" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->position_parser_;

          if (this->position_parser_)
            this->position_parser_->pre ();
        }
        else
        {
          if (this->position_parser_)
          {
            const ::std::string& tmp (this->position_parser_->post_string ());
            this->position (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "position",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "velocity" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->velocity_parser_;

          if (this->velocity_parser_)
            this->velocity_parser_->pre ();
        }
        else
        {
          if (this->velocity_parser_)
          {
            const ::std::string& tmp (this->velocity_parser_->post_string ());
            this->velocity (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "velocity",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "objectSpecificFormat" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->objectSpecificFormat_parser_;

          if (this->objectSpecificFormat_parser_)
            this->objectSpecificFormat_parser_->pre ();
        }
        else
        {
          if (this->objectSpecificFormat_parser_)
          {
            const ::std::string& tmp (this->objectSpecificFormat_parser_->post_string ());
            this->objectSpecificFormat (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "objectSpecificFormat",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

