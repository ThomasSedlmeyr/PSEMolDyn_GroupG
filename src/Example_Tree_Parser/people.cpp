// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "people.h"

// gender_t
// 

gender_t::
gender_t (value v)
: ::xml_schema::string (_xsd_gender_t_literals_[v])
{
}

gender_t::
gender_t (const char* v)
: ::xml_schema::string (v)
{
}

gender_t::
gender_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

gender_t::
gender_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

gender_t::
gender_t (const gender_t& v,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

gender_t& gender_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_gender_t_literals_[v]);

  return *this;
}


// person_t
// 

const person_t::first_name_type& person_t::
first_name () const
{
  return this->first_name_.get ();
}

person_t::first_name_type& person_t::
first_name ()
{
  return this->first_name_.get ();
}

void person_t::
first_name (const first_name_type& x)
{
  this->first_name_.set (x);
}

void person_t::
first_name (::std::unique_ptr< first_name_type > x)
{
  this->first_name_.set (std::move (x));
}

const person_t::middle_name_optional& person_t::
middle_name () const
{
  return this->middle_name_;
}

person_t::middle_name_optional& person_t::
middle_name ()
{
  return this->middle_name_;
}

void person_t::
middle_name (const middle_name_type& x)
{
  this->middle_name_.set (x);
}

void person_t::
middle_name (const middle_name_optional& x)
{
  this->middle_name_ = x;
}

void person_t::
middle_name (::std::unique_ptr< middle_name_type > x)
{
  this->middle_name_.set (std::move (x));
}

const person_t::last_name_type& person_t::
last_name () const
{
  return this->last_name_.get ();
}

person_t::last_name_type& person_t::
last_name ()
{
  return this->last_name_.get ();
}

void person_t::
last_name (const last_name_type& x)
{
  this->last_name_.set (x);
}

void person_t::
last_name (::std::unique_ptr< last_name_type > x)
{
  this->last_name_.set (std::move (x));
}

const person_t::gender_type& person_t::
gender () const
{
  return this->gender_.get ();
}

person_t::gender_type& person_t::
gender ()
{
  return this->gender_.get ();
}

void person_t::
gender (const gender_type& x)
{
  this->gender_.set (x);
}

void person_t::
gender (::std::unique_ptr< gender_type > x)
{
  this->gender_.set (std::move (x));
}

const person_t::age_type& person_t::
age () const
{
  return this->age_.get ();
}

person_t::age_type& person_t::
age ()
{
  return this->age_.get ();
}

void person_t::
age (const age_type& x)
{
  this->age_.set (x);
}

const person_t::id_type& person_t::
id () const
{
  return this->id_.get ();
}

person_t::id_type& person_t::
id ()
{
  return this->id_.get ();
}

void person_t::
id (const id_type& x)
{
  this->id_.set (x);
}


// people_t
// 

const people_t::person_sequence& people_t::
person () const
{
  return this->person_;
}

people_t::person_sequence& people_t::
person ()
{
  return this->person_;
}

void people_t::
person (const person_sequence& s)
{
  this->person_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// gender_t
//

gender_t::
gender_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_gender_t_convert ();
}

gender_t::
gender_t (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_gender_t_convert ();
}

gender_t::
gender_t (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_gender_t_convert ();
}

gender_t* gender_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class gender_t (*this, f, c);
}

gender_t::value gender_t::
_xsd_gender_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_gender_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_gender_t_indexes_,
                    _xsd_gender_t_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_gender_t_indexes_ + 2 || _xsd_gender_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const gender_t::
_xsd_gender_t_literals_[2] =
{
  "male",
  "female"
};

const gender_t::value gender_t::
_xsd_gender_t_indexes_[2] =
{
  ::gender_t::female,
  ::gender_t::male
};

// person_t
//

person_t::
person_t (const first_name_type& first_name,
          const last_name_type& last_name,
          const gender_type& gender,
          const age_type& age,
          const id_type& id)
: ::xml_schema::type (),
  first_name_ (first_name, this),
  middle_name_ (this),
  last_name_ (last_name, this),
  gender_ (gender, this),
  age_ (age, this),
  id_ (id, this)
{
}

person_t::
person_t (const person_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  first_name_ (x.first_name_, f, this),
  middle_name_ (x.middle_name_, f, this),
  last_name_ (x.last_name_, f, this),
  gender_ (x.gender_, f, this),
  age_ (x.age_, f, this),
  id_ (x.id_, f, this)
{
}

person_t::
person_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  first_name_ (this),
  middle_name_ (this),
  last_name_ (this),
  gender_ (this),
  age_ (this),
  id_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void person_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // first-name
    //
    if (n.name () == "first-name" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< first_name_type > r (
        first_name_traits::create (i, f, this));

      if (!first_name_.present ())
      {
        this->first_name_.set (::std::move (r));
        continue;
      }
    }

    // middle-name
    //
    if (n.name () == "middle-name" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< middle_name_type > r (
        middle_name_traits::create (i, f, this));

      if (!this->middle_name_)
      {
        this->middle_name_.set (::std::move (r));
        continue;
      }
    }

    // last-name
    //
    if (n.name () == "last-name" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< last_name_type > r (
        last_name_traits::create (i, f, this));

      if (!last_name_.present ())
      {
        this->last_name_.set (::std::move (r));
        continue;
      }
    }

    // gender
    //
    if (n.name () == "gender" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< gender_type > r (
        gender_traits::create (i, f, this));

      if (!gender_.present ())
      {
        this->gender_.set (::std::move (r));
        continue;
      }
    }

    // age
    //
    if (n.name () == "age" && n.namespace_ ().empty ())
    {
      if (!age_.present ())
      {
        this->age_.set (age_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!first_name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "first-name",
      "");
  }

  if (!last_name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "last-name",
      "");
  }

  if (!gender_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gender",
      "");
  }

  if (!age_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "age",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "id" && n.namespace_ ().empty ())
    {
      this->id_.set (id_traits::create (i, f, this));
      continue;
    }
  }

  if (!id_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "id",
      "");
  }
}

person_t* person_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class person_t (*this, f, c);
}

person_t& person_t::
operator= (const person_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->first_name_ = x.first_name_;
    this->middle_name_ = x.middle_name_;
    this->last_name_ = x.last_name_;
    this->gender_ = x.gender_;
    this->age_ = x.age_;
    this->id_ = x.id_;
  }

  return *this;
}

person_t::
~person_t ()
{
}

// people_t
//

people_t::
people_t ()
: ::xml_schema::type (),
  person_ (this)
{
}

people_t::
people_t (const people_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  person_ (x.person_, f, this)
{
}

people_t::
people_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  person_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void people_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // person
    //
    if (n.name () == "person" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< person_type > r (
        person_traits::create (i, f, this));

      this->person_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

people_t* people_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class people_t (*this, f, c);
}

people_t& people_t::
operator= (const people_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->person_ = x.person_;
  }

  return *this;
}

people_t::
~people_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::people_t >
people (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::people_t > (
    ::people (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::people_t >
people (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::people_t > (
    ::people (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::people_t >
people (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::people_t > (
    ::people (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::people_t >
people (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::people (isrc, f, p);
}

::std::unique_ptr< ::people_t >
people (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::people (isrc, h, f, p);
}

::std::unique_ptr< ::people_t >
people (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::people (isrc, h, f, p);
}

::std::unique_ptr< ::people_t >
people (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::people (isrc, f, p);
}

::std::unique_ptr< ::people_t >
people (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::people (isrc, h, f, p);
}

::std::unique_ptr< ::people_t >
people (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::people (isrc, h, f, p);
}

::std::unique_ptr< ::people_t >
people (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::people_t > (
    ::people (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::people_t >
people (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::people_t > (
    ::people (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::people_t >
people (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::people_t > (
    ::people (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::people_t >
people (const ::xercesc::DOMDocument& doc,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::people_t > (
      ::people (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "people" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::people_t > r (
      ::xsd::cxx::tree::traits< ::people_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "people",
    "");
}

::std::unique_ptr< ::people_t >
people (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "people" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::people_t > r (
      ::xsd::cxx::tree::traits< ::people_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "people",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

